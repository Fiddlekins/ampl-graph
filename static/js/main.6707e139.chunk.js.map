{"version":3,"sources":["App.module.css","Graph.module.css","getAmplData.js","amplDataFount.js","Graph.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","dayMs","getAmplData","a","fetch","res","json","market_caps","prices","total_volumes","aggregatedData","timestamp","value","market_cap","price","total_volume","sortedTimestamps","Object","keys","map","key","parseInt","sort","b","timestampStart","daysSinceStart","ampleDataFount","this","_handlers","_boundPollData","_pollData","bind","eventName","handler","context","Set","add","eventHandler","delete","args","call","data","emit","setTimeout","Graph","amplData","x","y","z","days","type","mode","marker","color","colorscale","size","text","layout","autosize","title","scene","xaxis","yaxis","autorange","zaxis","useResizeHandler","className","styles","plot","App","useState","setAmplData","useEffect","onData","amplDataFount","on","off","app","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6707e139.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__YGwuJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"plot\":\"Graph_plot__V3tCh\"};","const dayMs = 1000 * 60 * 60 * 24;\r\n\r\nexport default async function getAmplData() {\r\n\tconst res = await fetch(`https://api.coingecko.com/api/v3/coins/ampleforth/market_chart?vs_currency=usd&days=max`);\r\n\tconst {market_caps, prices, total_volumes} = await res.json();\r\n\tconst aggregatedData = {};\r\n\tfor (const [timestamp, value] of market_caps) {\r\n\t\tif (!aggregatedData[timestamp]) {\r\n\t\t\taggregatedData[timestamp] = {timestamp};\r\n\t\t}\r\n\t\taggregatedData[timestamp].market_cap = value;\r\n\t}\r\n\tfor (const [timestamp, value] of prices) {\r\n\t\tif (!aggregatedData[timestamp]) {\r\n\t\t\taggregatedData[timestamp] = {timestamp};\r\n\t\t}\r\n\t\taggregatedData[timestamp].price = value;\r\n\t}\r\n\tfor (const [timestamp, value] of total_volumes) {\r\n\t\tif (!aggregatedData[timestamp]) {\r\n\t\t\taggregatedData[timestamp] = {timestamp};\r\n\t\t}\r\n\t\taggregatedData[timestamp].total_volume = value;\r\n\t}\r\n\tconst sortedTimestamps = Object.keys(aggregatedData).map(key => parseInt(key, 10)).sort((a, b) => a - b);\r\n\tconst timestampStart = sortedTimestamps[0];\r\n\treturn sortedTimestamps.map(timestamp => {\r\n\t\tconst {market_cap, price, total_volume} = aggregatedData[timestamp];\r\n\t\treturn {\r\n\t\t\tmarket_cap,\r\n\t\t\tprice,\r\n\t\t\ttotal_volume,\r\n\t\t\tdaysSinceStart: (timestamp - timestampStart) / dayMs\r\n\t\t};\r\n\t});\r\n}\r\n","import getAmplData from './getAmplData.js';\r\n\r\nconst pollRate = 1000 * 60 * 60;\r\n\r\nclass AmplDataFount {\r\n\tconstructor() {\r\n\t\tthis._handlers = {};\r\n\t\tthis._boundPollData = this._pollData.bind(this);\r\n\t\tthis._pollData();\r\n\t}\r\n\r\n\ton(eventName, handler, context) {\r\n\t\tif (!this._handlers[eventName]) {\r\n\t\t\tthis._handlers[eventName] = new Set();\r\n\t\t}\r\n\t\tthis._handlers[eventName].add({handler, context});\r\n\t}\r\n\r\n\toff(eventName, handler, context = null) {\r\n\t\tif (!this._handlers[eventName]) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor (const eventHandler of this._handlers[eventName]) {\r\n\t\t\tif (eventHandler.handler === handler && (!context || eventHandler.context === context)) {\r\n\t\t\t\tthis._handlers[eventName].delete(eventHandler);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\temit(eventName, ...args) {\r\n\t\tif (!this._handlers[eventName]) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor (const {handler, context} of this._handlers[eventName]) {\r\n\t\t\tif (context) {\r\n\t\t\t\thandler.call(context, ...args);\r\n\t\t\t} else {\r\n\t\t\t\thandler(...args);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tasync _pollData() {\r\n\t\tconst data = await getAmplData();\r\n\t\tthis.emit('data', data);\r\n\t\tsetTimeout(this._boundPollData, pollRate);\r\n\t}\r\n}\r\n\r\nconst ampleDataFount = new AmplDataFount();\r\n\r\nexport default ampleDataFount;\r\n","import Plot from 'react-plotly.js';\r\nimport styles from './Graph.module.css';\r\n\r\nexport default function Graph({amplData}) {\r\n\tconst x = amplData.map(({price}) => price);\r\n\tconst y = amplData.map(({market_cap}) => market_cap);\r\n\tconst z = amplData.map(({total_volume}) => total_volume);\r\n\tconst days = amplData.map(({daysSinceStart}) => daysSinceStart);\r\n\tconst data = [\r\n\t\t{\r\n\t\t\tx,\r\n\t\t\ty,\r\n\t\t\tz,\r\n\t\t\ttype: 'scatter3d',\r\n\t\t\tmode: 'lines+markers',\r\n\t\t\tmarker: {\r\n\t\t\t\tcolor: days,\r\n\t\t\t\tcolorscale: 'Rainbow',\r\n\t\t\t\tsize: 3\r\n\t\t\t},\r\n\t\t\ttext: days.map(value => `Day ${value}`)\r\n\t\t}\r\n\t];\r\n\tconst layout = {\r\n\t\tautosize: true,\r\n\t\ttitle: 'AMPL historical data',\r\n\t\tscene: {\r\n\t\t\txaxis: {\r\n\t\t\t\ttitle: {\r\n\t\t\t\t\ttext: 'Price'\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tyaxis: {\r\n\t\t\t\ttitle: {\r\n\t\t\t\t\ttext: 'Market Cap'\r\n\t\t\t\t},\r\n\t\t\t\ttype: 'log',\r\n\t\t\t\tautorange: true\r\n\t\t\t},\r\n\t\t\tzaxis: {\r\n\t\t\t\ttitle: {\r\n\t\t\t\t\ttext: 'Total Volume'\r\n\t\t\t\t},\r\n\t\t\t\ttype: 'log',\r\n\t\t\t\tautorange: true\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\treturn (\r\n\t\t<Plot data={data} layout={layout} useResizeHandler={true} className={styles.plot}/>\r\n\t);\r\n}\r\n","import {useEffect, useState} from 'react';\nimport amplDataFount from './amplDataFount.js';\nimport styles from './App.module.css';\nimport Graph from './Graph.js';\n\nfunction App() {\n\tconst [amplData, setAmplData] = useState([]);\n\tuseEffect(() => {\n\t\tconst onData = (data) => {\n\t\t\tsetAmplData(data);\n\t\t}\n\t\tamplDataFount.on('data', onData);\n\t\treturn () => {\n\t\t\tamplDataFount.off('data', onData);\n\t\t}\n\t})\n\treturn (\n\t\t<div className={styles.app}>\n\t\t\t<Graph amplData={amplData}/>\n\t\t</div>\n\t);\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}